import numpy as np
import random
import math

# Distance between two points (Euclidean distance)
def euclidean_distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

# Ant Colony Optimization (ACO) Algorithm for Vehicle Routing Problem
class AntColony:
    def __init__(self, num_ants, num_iterations, alpha, beta, rho, q, distance_matrix):
        self.num_ants = num_ants  # Number of ants (vehicles)
        self.num_iterations = num_iterations  # Number of iterations
        self.alpha = alpha  # Pheromone importance
        self.beta = beta  # Distance (visibility) importance
        self.rho = rho  # Pheromone evaporation rate
        self.q = q  # Pheromone deposit amount
        self.distance_matrix = distance_matrix  # Distance matrix between points
        self.num_locations = len(distance_matrix)  # Total number of locations
        self.pheromone = np.ones((self.num_locations, self.num_locations))  # Pheromone matrix
        self.visibility = 1.0 / (self.distance_matrix + np.eye(self.num_locations))  # Visibility matrix

    def select_next_location(self, current_location, visited, ant_index):
        # Calculate probabilities for all unvisited cities
        probabilities = []
        total = 0.0
        for j in range(self.num_locations):
            if j not in visited:
                pheromone = self.pheromone[current_location][j] ** self.alpha
                visibility = self.visibility[current_location][j] ** self.beta
                prob = pheromone * visibility
                total += prob
                probabilities.append(prob)
            else:
                probabilities.append(0)

        # Normalize probabilities
        probabilities = [prob / total for prob in probabilities]
        
        # Select the next city using a roulette-wheel selection method
        rand = random.random()
        cumulative_prob = 0.0
        for i, prob in enumerate(probabilities):
            cumulative_prob += prob
            if cumulative_prob >= rand:
                return i

    def construct_solution(self):
        # Create a solution (route) for each ant
        routes = []
        for ant_index in range(self.num_ants):
            visited = [0]  # Start from depot
            current_location = 0
            for _ in range(self.num_locations - 1):
                next_location = self.select_next_location(current_location, visited, ant_index)
                visited.append(next_location)
                current_location = next_location
            routes.append(visited)
        return routes

    def update_pheromone(self, routes, distances):
        # Evaporate pheromone
        self.pheromone *= (1 - self.rho)

        # Add new pheromone based on the quality of the solutions
        for ant_index, route in enumerate(routes):
            route_distance = distances[ant_index]
            pheromone_deposit = self.q / route_distance
            for i in range(len(route) - 1):
                self.pheromone[route[i]][route[i + 1]] += pheromone_deposit
            self.pheromone[route[-1]][route[0]] += pheromone_deposit  # Returning to the depot

    def run(self):
        best_route = None
        best_distance = float('inf')

        # Main ACO loop
        for iteration in range(self.num_iterations):
            # Construct routes for all ants
            routes = self.construct_solution()

            # Calculate distance for each ant's route
            distances = []
            for route in routes:
                total_distance = 0
                for i in range(len(route) - 1):
                    total_distance += self.distance_matrix[route[i]][route[i + 1]]
                total_distance += self.distance_matrix[route[-1]][route[0]]  # Return to depot
                distances.append(total_distance)

            # Update best solution if a better one is found
            min_distance = min(distances)
            if min_distance < best_distance:
                best_distance = min_distance
                best_route = routes[distances.index(min_distance)]

            # Update pheromone values based on the solutions found
            self.update_pheromone(routes, distances)

            print(f"Iteration {iteration + 1}: Best Distance = {best_distance}")

        return best_route, best_distance


# Define locations (depot + customers)
locations = np.array([
    [0, 0],  # Depot
    [1, 3],  # Customer 1
    [4, 3],  # Customer 2
    [6, 1],  # Customer 3
    [3, 2],  # Customer 4
    [5, 4],  # Customer 5
])

# Create distance matrix
num_locations = len(locations)
distance_matrix = np.zeros((num_locations, num_locations))
for i in range(num_locations):
    for j in range(num_locations):
        distance_matrix[i][j] = euclidean_distance(locations[i], locations[j])

# Initialize and run ACO
aco = AntColony(num_ants=5, num_iterations=100, alpha=1.0, beta=2.0, rho=0.1, q=100, distance_matrix=distance_matrix)
best_route, best_distance = aco.run()

# Output the best route and its distance
print(f"\nBest route: {best_route}")
print(f"Best distance: {best_distance}")
